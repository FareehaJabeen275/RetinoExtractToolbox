import numpy as np
from skimage import color
from skimage.filters import gabor_kernel
from scipy import ndimage as ndi
from skimage.filters import gabor
import scipy

def extract_gabor_features(image, frequencies=None, orientations=None):
    """
    Extracts Gabor features from a given image.

    Parameters:
    - image: The input image (can be RGB or grayscale).
    - frequencies: List of frequencies for the Gabor kernels (default is [0.1, 0.3, 0.5]).
    - orientations: List of orientations for the Gabor kernels in radians (default is [0, pi/4, pi/2, 3*pi/4]).

    Returns:
    - features: A list of feature maps generated by the Gabor filters.
    """

    # Convert to grayscale if the image is RGB
    if len(image.shape) == 3:
        image = color.rgb2gray(image)
    
    if frequencies is None:
        frequencies = [0.1, 0.3, 0.5]
    
    if orientations is None:
        orientations = [0, np.pi/4, np.pi/2, 3*np.pi/4]
    
    features = []
    for frequency in frequencies:
        for theta in orientations:
            kernel = gabor_kernel(frequency, theta=theta)
            filtered = ndi.convolve(image, np.real(kernel), mode='wrap')
            features.append(filtered)
    
    # return features
    return compute_gabor_statistics(features)

def compute_gabor_statistics(gabor_features):
    """
    Compute statistical features from Gabor filter outputs.

    Parameters:
    - gabor_features: List of Gabor filter outputs.

    Returns:
    - statistics: Dictionary with statistical features for each Gabor filter output.
    """
    statistics = {}
    for i, feature in enumerate(gabor_features):
        mean = np.mean(feature)
        std = np.std(feature)
        variance = np.var(feature)
        skewness = scipy.stats.skew(feature.ravel())
        kurtosis = scipy.stats.kurtosis(feature.ravel())
        energy = np.sum(feature ** 2)
        entropy = -np.sum(feature * np.log(feature + 1e-10))
        contrast = np.max(feature) - np.min(feature)
        homogeneity = np.sum(1 / (1 + (feature - np.mean(feature)) ** 2))
        
        statistics[f'Feature_{i}'] = {
            'Mean': mean,
            'Standard Deviation': std,
            'Variance': variance,
            'Skewness': skewness,
            'Kurtosis': kurtosis,
            'Energy': energy,
            'Entropy': entropy,
            'Contrast': contrast,
            'Homogeneity': homogeneity
        }
    
    return statistics